{"version":3,"sources":["components/titlebar.jsx","components/loading.jsx","components/message.jsx","components/searchresults.jsx","App.js","serviceWorker.js","index.js"],"names":["Titlebar","state","className","src","alt","Component","Loading","Spinner","animation","role","Message","Fragment","Results","props","handleSubmit","event","preventDefault","data","search","performSearch","handleInputChange","setState","target","name","value","loading","message","searchTerm","urlString","this","$","ajax","url","success","searchResults","console","log","results","imageRows","forEach","image","imageRow","data-fancybox","href","urls","regular","key","id","push","rows","length","error","xhr","status","err","onSubmit","type","onChange","placeholder","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch"],"mappings":"gRAceA,E,4MAXbC,MAAQ,G,uDAEN,OACE,yBAAKC,UAAU,SACb,yBAAKA,UAAU,aAAaC,IAAI,oBAAoBC,IAAI,SACxD,2D,GANeC,a,+BCWRC,E,uKARX,OACE,kBAACC,EAAA,EAAD,CAASC,UAAU,SAASC,KAAK,UAC/B,0BAAMP,UAAU,WAAhB,mB,GAJcG,aCWPK,E,4MAXbT,MAAQ,G,uDAEN,OACE,kBAAC,IAAMU,SAAP,KACE,0EACA,yBAAKR,IAAI,qBAAqBC,IAAI,kB,GANpBC,aC8FPO,E,kDA1Fb,WAAYC,GAAQ,IAAD,8BACjB,cAAMA,IAgDRC,aAAe,SAACC,GACdA,EAAMC,iBACN,IAAMC,EAAO,EAAKhB,MAAMiB,OACxB,EAAKC,cAAcF,IApDF,EAuDnBG,kBAAoB,SAACL,GACnBA,EAAMC,iBACN,EAAKK,SAAL,eACGN,EAAMO,OAAOC,KAAOR,EAAMO,OAAOE,SAxDpC,EAAKvB,MAAQ,CACXiB,OAAQ,GACRO,SAAS,EACTC,SAAS,GALM,E,0DASLC,GAAa,IAAD,OAClBC,EACJ,kHACAD,EACFE,KAAKR,SAAS,CAAEI,SAAS,IACzBK,IAAEC,KAAK,CACLC,IAAKJ,EACLK,QAAS,SAACC,GACRC,QAAQC,IAAI,6BACZ,IAAMC,EAAUH,EAAcG,QAE1BC,EAAY,GAEhBD,EAAQE,SAAQ,SAACC,GACf,IAAMC,EACJ,uBACEvC,UAAU,oCACVwC,gBAAc,UACdC,KAAMH,EAAMI,KAAKC,QACjBC,IAAKN,EAAMO,IAEX,yBAAKD,IAAKN,EAAMO,GAAI5C,IAAKqC,EAAMI,KAAKC,QAASzC,IAAI,YAGrDkC,EAAUU,KAAKP,MAEjB,EAAKpB,SAAS,CAAEI,SAAS,IAEzB,EAAKJ,SAAS,CAAE4B,KAAMX,IACK,IAA3B,EAAKrC,MAAMgD,KAAKC,OACZ,EAAK7B,SAAS,CAAEK,SAAS,IACzB,EAAKL,SAAS,CAAEK,SAAS,KAE/ByB,MAAO,SAACC,EAAKC,EAAQC,GACnBnB,QAAQgB,MAAM,wBACd,EAAK9B,SAAS,CAAEI,SAAS,S,+BAmB7B,OACE,kBAAC,IAAMd,SAAP,KACE,0BACET,UAAU,iCACVqD,SAAU1B,KAAKf,cAEf,2BACEZ,UAAU,mCACVsD,KAAK,OACLC,SAAU5B,KAAKT,kBACfsC,YAAY,mBACZnC,KAAK,WAEP,4BAAQiC,KAAK,SAAStD,UAAU,uBAAhC,WAIF,yBAAKA,UAAU,8BACZ2B,KAAK5B,MAAMwB,SAAW,kBAAC,EAAD,OAEzB,yBAAKvB,UAAU,WAAW2B,KAAK5B,MAAMyB,SAAW,kBAAC,EAAD,OAChD,yBAAKxB,UAAU,OAAO2B,KAAK5B,MAAMgD,W,GArFnB5C,aCSPsD,MATf,WACE,OACE,yBAAKzD,UAAU,aACb,kBAAC,EAAD,MACA,kBAAC,EAAD,QCGc0D,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,MCXNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDwHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAzB,GACLhB,QAAQgB,MAAMA,EAAMzB,c","file":"static/js/main.00643158.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\n\r\nclass Titlebar extends Component {\r\n  state = {};\r\n  render() {\r\n    return (\r\n      <div className=\"title\">\r\n        <img className=\"titleImage\" src=\"logo_unsplash.png\" alt=\"logo\"></img>\r\n        <h1>Unsplash images search</h1>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Titlebar;\r\n","import React, { Component } from \"react\";\r\nimport { Spinner } from \"react-bootstrap\";\r\n\r\nclass Loading extends Component {\r\n  render() {\r\n    return (\r\n      <Spinner animation=\"border\" role=\"status\">\r\n        <span className=\"sr-only\">Loading...</span>\r\n      </Spinner>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Loading;\r\n","import React, { Component } from \"react\";\r\n\r\nclass Message extends Component {\r\n  state = {};\r\n  render() {\r\n    return (\r\n      <React.Fragment>\r\n        <p>No results found. Please try another search</p>\r\n        <img src=\"no_image_found.png\" alt=\"no_image\"></img>\r\n      </React.Fragment>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Message;\r\n","import React, { Component } from \"react\";\r\nimport $ from \"jquery\";\r\nimport Loading from \"../components/loading\";\r\nimport Message from \"../components/message\";\r\n\r\nclass Results extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      search: \"\",\r\n      loading: false,\r\n      message: false,\r\n    };\r\n  }\r\n\r\n  performSearch(searchTerm) {\r\n    const urlString =\r\n      \"https://api.unsplash.com/search/photos?per_page=30&client_id=Emfp4Cb_iwwmiqVm07UlzMSrkAfXKMYGuGuUWrl-XLA&query=\" +\r\n      searchTerm;\r\n    this.setState({ loading: true });\r\n    $.ajax({\r\n      url: urlString,\r\n      success: (searchResults) => {\r\n        console.log(\"Fetched data successfully\");\r\n        const results = searchResults.results;\r\n\r\n        var imageRows = [];\r\n\r\n        results.forEach((image) => {\r\n          const imageRow = (\r\n            <a\r\n              className=\"col-12 col-sm-6 col-md-3 col-lg-2\"\r\n              data-fancybox=\"gallery\"\r\n              href={image.urls.regular}\r\n              key={image.id}\r\n            >\r\n              <img key={image.id} src={image.urls.regular} alt=\"poster\"></img>\r\n            </a>\r\n          );\r\n          imageRows.push(imageRow);\r\n        });\r\n        this.setState({ loading: false });\r\n\r\n        this.setState({ rows: imageRows });\r\n        this.state.rows.length !== 0\r\n          ? this.setState({ message: false })\r\n          : this.setState({ message: true });\r\n      },\r\n      error: (xhr, status, err) => {\r\n        console.error(\"Failed to fetch data\");\r\n        this.setState({ loading: false });\r\n      },\r\n    });\r\n  }\r\n\r\n  handleSubmit = (event) => {\r\n    event.preventDefault();\r\n    const data = this.state.search;\r\n    this.performSearch(data);\r\n  };\r\n\r\n  handleInputChange = (event) => {\r\n    event.preventDefault();\r\n    this.setState({\r\n      [event.target.name]: event.target.value,\r\n    });\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <React.Fragment>\r\n        <form\r\n          className=\"row m-2 justify-content-center\"\r\n          onSubmit={this.handleSubmit}\r\n        >\r\n          <input\r\n            className=\"col-9 col-sm-8 col-md-6 col-lg-6\"\r\n            type=\"text\"\r\n            onChange={this.handleInputChange}\r\n            placeholder=\"Enter your image\"\r\n            name=\"search\"\r\n          />\r\n          <button type=\"submit\" className=\"btn btn-dark btn-sm\">\r\n            Search\r\n          </button>\r\n        </form>\r\n        <div className=\"row justify-content-center\">\r\n          {this.state.loading && <Loading />}\r\n        </div>\r\n        <div className=\"message\">{this.state.message && <Message />}</div>\r\n        <div className=\"row\">{this.state.rows}</div>\r\n      </React.Fragment>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Results;\r\n","import React from \"react\";\nimport \"./App.css\";\nimport Titlebar from \"./components/titlebar\";\nimport Results from \"./components/searchresults\";\n\nfunction App() {\n  return (\n    <div className=\"container\">\n      <Titlebar />\n      <Results />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport \"bootstrap/dist/css/bootstrap.css\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}